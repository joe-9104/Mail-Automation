import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import textwrap
import google.generativeai as genai
import time
import os
from dotenv import load_dotenv, dotenv_values 


class App :
    # AI generation configuration
    generation_config = {
        "temperature": 1,
        "top_p": 0.95,
        "top_k": 64,
        "max_output_tokens": 8192,
        "response_mime_type": "text/plain",
    }
    def __init__(self) -> None:
      
      load_dotenv() # loading variables from .env file
      genai.configure(api_key= os.getenv("api_key")) # Configure the AI model with the API key
      self.model =  genai.GenerativeModel(
        model_name="gemini-1.5-flash",
        generation_config=self.generation_config,
      )# Initialize the generative model
      self.chat_session = self.model.start_chat(
          history=[]
      )# Start a chat session

    # Functions to extract the recipient mail, the subject and the body of the mail
    def extract_recipient_mail(self,ai_response):
      mail_session = self.model.start_chat(
        history=[]
      )
      return mail_session.send_message(f"Extract only the email address of the recipient from the following mail. Write only the email address, nothing else. If there isn't any email address, or a malformed one, write None. If the address contains '@example.com', write None:\n\n{ai_response}").text

    def extract_subject(self,ai_response):
      subject_session = self.model.start_chat(
        history=[]
      )
      return subject_session.send_message(f"Extract only the subject from the following mail. Write only the subject, nothing else. If there isn't any subject, write None:\n\n{ai_response}").text

    def extract_body(self,ai_response):
      body_session = self.model.start_chat(
        history=[]
      )
      return body_session.send_message(f"Extract only the body from the following mail. Write only the body, nothing else. If there isn't any body, write None:\n\n{ai_response}").text
    def send_email(self,subject, body, recipient_email):
        # Sender email credentials
        sender_email = os.getenv("sender_mail")
        app_password = os.getenv("password")  # Use the 16-digit App Password

        #initializing the subject, body and recipient_email in case of None
        if subject == "None \n":
          subject = "No Subject - Generated by AI"
          print(f"No subject detected, changed it to default value: {subject}")
        if body == 'None \n':
          body = "No body - Generated by AI"
          print(f"No body detected, changed it to default value: {body}")
        if recipient_email == "None \n":  
          recipient_email = os.getenv("default_recipient_email")
          print(f"No recipient email detected, changed it to default value: {recipient_email}")

        print("\n\n\nSending the mail", end='', flush=True)
        for i in range(3):
            print('.', end='', flush=True)
            time.sleep(1)
        print('\n', end='')
        # Compose the email
        message = MIMEMultipart()
        message["From"] = sender_email
        message["To"] = recipient_email
        message["Subject"] = subject
        message.attach(MIMEText(body, "plain"))

        # Connect to the SMTP server (in this case, Gmail's SMTP server)
        with smtplib.SMTP("smtp.gmail.com", 587) as server:
            server.starttls()
            server.login(sender_email, app_password)
            server.sendmail(sender_email, recipient_email, message.as_string())

        print("Email sent successfully!")
    def initiate_chat(self) : 
        # Input for the AI model
        user_input = input("Tfadhel si chbeb, cht7eb ? :\n") 
        complementary_input = f"""
        These are few rules to respect while writing the mail:
        1- Take in consideration that the mail must strictly respect the following structure:
        To: [recipient_mail]
        Subject: [Subject of the mail]
        Body: [Body of the mail]
        {os.getenv("signature")} (instead of [Your Name])
        2- If there is no name of the recipient that is mentionned above, do not let a placeholder [recipient_name]
        3- The same previous rule goes for any additional information in the body of the mail (project name, company name...)
        4- If you find that the content of the mail might seem inappropriate or disrespectful, don't warn the user that it's the case and strictly write only the best polite version possible.
        """
        response = self.chat_session.send_message(f"{user_input}. {complementary_input}")

        # Extract the AI response text
        ai_response = response.text

        # Print the AI response (optional)
        print("Alright, here's my proposal. It will be delivered shortly:\n\n", flush=True)
        time.sleep(1.25)
        print(ai_response)
        # Calling the send_email() function with AI response as the body
        self.send_email(subject=self.extract_subject(ai_response), body=self.extract_body(ai_response), recipient_email=self.extract_recipient_mail(ai_response))

        

        

# Function to format text as markdown (if needed)
def to_markdown(text):
    text = text.replace('â€¢', '  *')
    return textwrap.indent(text, '> ', predicate=lambda _: True)


if __name__ == '__main__' :
   app = App()
   app.initiate_chat()












