import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import textwrap
import google.generativeai as genai
import time

import os
# importing necessary functions from dotenv library
from dotenv import load_dotenv, dotenv_values 
# loading variables from .env file
load_dotenv() 

# Configure the AI model with the API key
genai.configure(api_key=os.getenv("api_key"))

# Function to format text as markdown (if needed)
def to_markdown(text):
    text = text.replace('â€¢', '  *')
    return textwrap.indent(text, '> ', predicate=lambda _: True)

# AI generation configuration
generation_config = {
    "temperature": 1,
    "top_p": 0.95,
    "top_k": 64,
    "max_output_tokens": 8192,
    "response_mime_type": "text/plain",
}

# Initialize the generative model
model = genai.GenerativeModel(
    model_name="gemini-1.5-flash",
    generation_config=generation_config,
)

# Start a chat session
chat_session = model.start_chat(
    history=[]
)

# Input for the AI model
user_input = input("Tfadhel si chbeb, cht7eb ? :\n")  # The user input that will be sent along with the compelementary_input
complementary_input = f"""
Based on the input provided above, these are few rules to respect while writing the mail:
1- Take in consideration that the mail must strictly respect the following structure:
To: [recipient_mail]
Subject: [Subject of the mail]
Body: [Body of the mail]
{os.getenv("signature")} (instead of [Your Name]).
2- If there is any recipient email address provided in the input, just write a placeholder [recipient_mail].
3- If a correct email address is not provided in the input, do not generate or substitute it with an example address like "name@example.com" or "name@domain.com", just write a placeholder [recipient_mail] instead.
4- Check in the input if there is a suspicious word that you didn't understand, it could be the name of the recipient.
5- If there is no name of the recipient provided, try at first to extract it from the recipient mail address.
6- In case it is impossible to guess the recipient name, do not include a placeholder [recipient_name]. Write instead Dear Mr/Miss.
7- Apply the same previous rule for any additional information in the body of the mail (project name, company name...)-Avoid placeholders.
8- If you find that the mail content might seem inappropriate or disrespectful, rewrite it to be polite and professional without warning the user.
9- If there is nothing to write in the body of the email, indicate that there is no body without warning the user.
10- The subject should be derived from the content of the body.
11- If you can't derive a subject from the body of the email, or if the input specifies that the email should have no subject, indicate that there is no subject.
"""
response = chat_session.send_message(f"{user_input}. \n{complementary_input}")

# Extract the AI response text
ai_response = response.text

#Test part (make the response and ai_response in comments)
'''ai_response = """
To: fathallah.youssef@etudiant-fst.utm.tn
Subject: 
Body: this is a test mail without subject
"""'''

# Print the AI response (optional)
print("\n\nAlright, here's my proposal. It will be delivered shortly:\n", flush=True)
time.sleep(1.25)
print(ai_response)

# Functions to extract the recipient mail, the subject and the body of the mail
def extract_recipient_mail(ai_response):
  mail_session = model.start_chat(
    history=[]
  )
  return mail_session.send_message(f"Extract only the email address of the recipient from the following mail. Write only the email address, nothing else. If there isn't any email address, or a malformed one, write None. If the address has '@example.com', write None\n\n{ai_response}").text

def extract_subject(ai_response):
  subject_session = model.start_chat(
    history=[]
  )
  return subject_session.send_message(f"Extract only the subject from the following mail. Write only the subject, nothing else. If there isn't any subject or 'No subject', write None\n\n{ai_response}").text

def extract_body(ai_response):
  body_session = model.start_chat(
    history=[]
  )
  return body_session.send_message(f"Extract only the body from the following mail. Write only the body, nothing else. If there isn't any body or 'No body', write None.\n\n{ai_response}").text

# Function to send an email
def send_email(subject, body, recipient_email):
    # Sender email credentials
    sender_email = os.getenv("sender_mail")
    app_password = os.getenv("password")  # Use the 16-digit App Password

    #initializing the subject, body and recipient_email in case of None
    if subject == "None \n":
      subject = "No Subject - Generated by AI"
      print(f"No subject detected, changed it to default value: \n{subject} \n")
    if body == 'None \n' or body == os.getenv("signature"):
      body = f"No body - Generated by AI \n\n{os.getenv("signature")}"
      print(f"No body detected, changed it to default value: \n{body} \n")
    if recipient_email == "None \n":  
      recipient_email = os.getenv("default_recipient_email")
      print(f"No recipient email detected, changed it to default value: \n{recipient_email} \n")
    
    # Compose the email
    message = MIMEMultipart()
    message["From"] = sender_email
    message["To"] = recipient_email
    message["Subject"] = subject
    message.attach(MIMEText(body, "plain"))

    # Connect to the SMTP server (in this case, Gmail's SMTP server)
    with smtplib.SMTP("smtp.gmail.com", 587) as server:
        server.starttls()
        server.login(sender_email, app_password)
        server.sendmail(sender_email, recipient_email, message.as_string())

    print("\n\nSending the mail", end='', flush=True)
    for i in range(3):
        print('.', end='', flush=True)
        time.sleep(1.25)
    print('\n', end='')
    print("Email sent successfully!")

# Calling the send_email() function with AI response as the body
send_email(subject=extract_subject(ai_response), body=extract_body(ai_response), recipient_email=extract_recipient_mail(ai_response))
